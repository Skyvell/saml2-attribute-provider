package io.curity.identityserver.plugin.ica.data.access.attributefun main() {    // Initialize different subject maps to test the signing.    val subjectMapAssertion = mutableMapOf(        "signing" to "onlyAssertion",        "token" to "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE0NTIzNDU0MzYsImF1ZCI6WyJteS1hcHAtaWQtMSIsIm15LWFwcC1pZC0yIl0sImF6cCI6ImNsaWVudEFwcElkIiwic2FtbElzc3VlciI6Imh0dHBzOi8vaWRlbnRpdHlwcm92aWRlci5leGFtcGxlLmNvbS9zYW1sIiwic2FtbFJlY2lwaWVudCI6Imh0dHBzOi8vc2VydmljZXByb3ZpZGVyLmV4YW1wbGUuY29tL2FjcyIsImFtciI6Imh0dHBzOi8vaWQuc2FtYmkuc2UvbG9hL2xvYTMifQ.4aTmQcf5YPQ0olLGBfoa6XWGTcjWkve6bstfsvNUzX8"    )    val subjectMapResponse = mutableMapOf(        "signing" to "onlyResponse",        "token" to "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE0NTIzNDU0MzYsImF1ZCI6WyJteS1hcHAtaWQtMSIsIm15LWFwcC1pZC0yIl0sImF6cCI6ImNsaWVudEFwcElkIiwic2FtbElzc3VlciI6Imh0dHBzOi8vaWRlbnRpdHlwcm92aWRlci5leGFtcGxlLmNvbS9zYW1sIiwic2FtbFJlY2lwaWVudCI6Imh0dHBzOi8vc2VydmljZXByb3ZpZGVyLmV4YW1wbGUuY29tL2FjcyIsImFtciI6Imh0dHBzOi8vaWQuc2FtYmkuc2UvbG9hL2xvYTMifQ.4aTmQcf5YPQ0olLGBfoa6XWGTcjWkve6bstfsvNUzX8"    )    val subjectMapBoth = mutableMapOf(        "signing" to "both",        "token" to "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE0NTIzNDU0MzYsImF1ZCI6WyJteS1hcHAtaWQtMSIsIm15LWFwcC1pZC0yIl0sImF6cCI6ImNsaWVudEFwcElkIiwic2FtbElzc3VlciI6Imh0dHBzOi8vaWRlbnRpdHlwcm92aWRlci5leGFtcGxlLmNvbS9zYW1sIiwic2FtbFJlY2lwaWVudCI6Imh0dHBzOi8vc2VydmljZXByb3ZpZGVyLmV4YW1wbGUuY29tL2FjcyIsImFtciI6Imh0dHBzOi8vaWQuc2FtYmkuc2UvbG9hL2xvYTMifQ.4aTmQcf5YPQ0olLGBfoa6XWGTcjWkve6bstfsvNUzX8"    )    val subjectMapNeither = mutableMapOf(        "signing" to "neither",        "token" to "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE0NTIzNDU0MzYsImF1ZCI6WyJteS1hcHAtaWQtMSIsIm15LWFwcC1pZC0yIl0sImF6cCI6ImNsaWVudEFwcElkIiwic2FtbElzc3VlciI6Imh0dHBzOi8vaWRlbnRpdHlwcm92aWRlci5leGFtcGxlLmNvbS9zYW1sIiwic2FtbFJlY2lwaWVudCI6Imh0dHBzOi8vc2VydmljZXByb3ZpZGVyLmV4YW1wbGUuY29tL2FjcyIsImFtciI6Imh0dHBzOi8vaWQuc2FtYmkuc2UvbG9hL2xvYTMifQ.4aTmQcf5YPQ0olLGBfoa6XWGTcjWkve6bstfsvNUzX8"    )    // Initialize the provider.    val provider = SAMLAttributeDataAccessProvider()    // Call provider function with different "signing" in subject map.    val onlyAssertion = provider.getAttributes(subjectMapAssertion)    val onlyResponse = provider.getAttributes(subjectMapResponse)    val both = provider.getAttributes(subjectMapBoth)    val neither = provider.getAttributes(subjectMapNeither)    /*    Print all variations. First item in the list is the final assertion in base64 encoding.    Second item in list is the final response in base64 encoding.    */    println("")    println("Only assertion signed: $onlyAssertion \n")    println("Only response signed: $onlyResponse \n")    println("Both signed: $both \n")    println("Neither signed: $neither")}